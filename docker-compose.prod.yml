# üè¢‚ö° Energy Optimizer Pro - Production Configuration
# ====================================================
# Production Docker Compose with Nginx load balancer

version: '3.8'

services:
  # ================================
  # üåê Nginx - Load Balancer & SSL
  # ================================
  nginx:
    image: nginx:1.25-alpine
    container_name: energy_optimizer_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - energy_optimizer_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # üé® Frontend - Production Build
  # ================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - NODE_ENV=production
        - NEXT_PUBLIC_API_URL=${API_URL:-https://api.energy-optimizer.com}
        - NEXT_PUBLIC_WS_URL=${WS_URL:-wss://api.energy-optimizer.com}
    container_name: energy_optimizer_frontend_prod
    restart: unless-stopped
    expose:
      - "3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    volumes:
      - ./logs/frontend:/app/logs
    networks:
      - energy_optimizer_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # üêç Backend - Production
  # ================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: energy_optimizer_backend_prod
    restart: unless-stopped
    expose:
      - "8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://energy_user:${DB_PASSWORD}@postgres:5432/energy_optimizer
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=INFO
      - WORKERS=4
      - ENABLE_CORS=false
      - ENABLE_DOCS=false
    volumes:
      - ./logs/backend:/app/logs
      - ./uploads:/app/uploads
      - ./models:/app/models
    depends_on:
      - postgres
      - redis
    networks:
      - energy_optimizer_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # üóÑÔ∏è PostgreSQL - Production
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: energy_optimizer_postgres_prod
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=energy_optimizer
      - POSTGRES_USER=energy_user
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./logs/postgres:/var/log/postgresql
      - ./backups:/backups
    command: |
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c log_statement=mod
      -c log_duration=on
      -c log_line_prefix='%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
    networks:
      - energy_optimizer_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U energy_user -d energy_optimizer"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # üî¥ Redis - Production Cache
  # ================================
  redis:
    image: redis:7-alpine
    container_name: energy_optimizer_redis_prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_prod_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - ./logs/redis:/var/log/redis
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - energy_optimizer_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ================================
  # üîÑ Celery Worker - Background Tasks
  # ================================
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: energy_optimizer_celery_worker
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://energy_user:${DB_PASSWORD}@postgres:5432/energy_optimizer
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - WORKER_CONCURRENCY=4
    volumes:
      - ./logs/celery:/app/logs
      - ./uploads:/app/uploads
      - ./models:/app/models
    command: celery -A app.worker worker --loglevel=info --concurrency=4
    depends_on:
      - postgres
      - redis
    networks:
      - energy_optimizer_network
    healthcheck:
      test: ["CMD", "celery", "-A", "app.worker", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3

  # ================================
  # ‚è∞ Celery Beat - Scheduled Tasks
  # ================================
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: energy_optimizer_celery_beat
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://energy_user:${DB_PASSWORD}@postgres:5432/energy_optimizer
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./logs/celery:/app/logs
      - celery_beat_data:/app/celerybeat-schedule
    command: celery -A app.worker beat --loglevel=info
    depends_on:
      - postgres
      - redis
    networks:
      - energy_optimizer_network

  # ================================
  # üìä Celery Flower - Task Monitor
  # ================================
  celery-flower:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: energy_optimizer_celery_flower
    restart: unless-stopped
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - FLOWER_PORT=5555
      - FLOWER_BASIC_AUTH=admin:admin123
    command: celery -A app.worker flower --port=5555
    depends_on:
      - redis
      - celery-worker
    networks:
      - energy_optimizer_network
    profiles:
      - flower

  # ================================
  # üõ°Ô∏è Fail2ban - Security (Optional)
  # ================================
  fail2ban:
    image: crazymax/fail2ban:1.0.2
    container_name: energy_optimizer_fail2ban
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - NET_RAW
    network_mode: "host"
    volumes:
      - ./logs/nginx:/var/log/nginx:ro
      - ./logs/auth:/var/log/auth:ro
      - fail2ban_data:/data
      - /var/log:/var/log:ro
    environment:
      - TZ=Europe/Rome
      - F2B_LOG_LEVEL=INFO
      - F2B_DB_PURGE_AGE=30d
    profiles:
      - security

# ================================
# üíæ Production Volumes
# ================================
volumes:
  postgres_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres-prod
  
  redis_prod_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis-prod
  
  celery_beat_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/celery
  
  fail2ban_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/fail2ban

# ================================
# üåê Networks
# ================================
networks:
  energy_optimizer_network:
    external: true
