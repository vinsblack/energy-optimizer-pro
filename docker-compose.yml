version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: energy_optimizer_db
    environment:
      POSTGRES_DB: energy_optimizer
      POSTGRES_USER: energy_user
      POSTGRES_PASSWORD: energy_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - energy_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U energy_user -d energy_optimizer"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: energy_optimizer_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - energy_network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: .
      target: backend-deps
    container_name: energy_optimizer_backend
    environment:
      - DATABASE_URL=postgresql://energy_user:energy_password_2024@postgres:5432/energy_optimizer
      - REDIS_URL=redis://redis:6379/0
      - CORS_ORIGINS=["http://localhost:3000", "https://energy-optimizer.vercel.app"]
      - LOG_LEVEL=INFO
      - MODEL_CACHE_SIZE=100
      - MAX_PROCESSING_WORKERS=4
      - ENABLE_METRICS=true
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - energy_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "cd /app/backend && 
             python -m alembic upgrade head &&
             uvicorn main:app --host 0.0.0.0 --port 8000 --reload"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  frontend:
    build:
      context: .
      target: frontend-build
    container_name: energy_optimizer_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      - NEXT_PUBLIC_GA_ID=${GA_TRACKING_ID:-}
      - NEXT_PUBLIC_ENABLE_ANALYTICS=true
      - NEXT_PUBLIC_ENVIRONMENT=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app/frontend
      - frontend_node_modules:/app/frontend/node_modules
    networks:
      - energy_network
    depends_on:
      - backend
    restart: unless-stopped
    command: >
      sh -c "cd /app/frontend && npm run dev"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: energy_optimizer_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    networks:
      - energy_network
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    profiles:
      - production

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: energy_optimizer_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - energy_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: energy_optimizer_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - energy_network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

  # ML Model Training Service
  ml_trainer:
    build:
      context: .
      target: backend-deps
    container_name: energy_optimizer_ml_trainer
    environment:
      - DATABASE_URL=postgresql://energy_user:energy_password_2024@postgres:5432/energy_optimizer
      - REDIS_URL=redis://redis:6379/1
      - MODEL_STORAGE_PATH=/app/models
      - TRAINING_SCHEDULE=0 2 * * *  # Daily at 2 AM
    volumes:
      - ./backend:/app/backend
      - ./models:/app/models
      - ./logs:/app/logs
    networks:
      - energy_network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    command: >
      sh -c "cd /app/backend && 
             python -m celery worker -A tasks.celery --loglevel=info"
    profiles:
      - ml

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: .
      target: backend-deps
    container_name: energy_optimizer_scheduler
    environment:
      - DATABASE_URL=postgresql://energy_user:energy_password_2024@postgres:5432/energy_optimizer
      - REDIS_URL=redis://redis:6379/1
    volumes:
      - ./backend:/app/backend
      - ./logs:/app/logs
    networks:
      - energy_network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    command: >
      sh -c "cd /app/backend && 
             python -m celery beat -A tasks.celery --loglevel=info"
    profiles:
      - ml

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  frontend_node_modules:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  energy_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

# Development override
# Usage: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
# docker-compose.dev.yml
version: '3.8'

services:
  backend:
    build:
      target: development
    volumes:
      - ./backend:/app/backend:cached
      - ./logs:/app/logs
    environment:
      - DEBUG=true
      - LOG_LEVEL=DEBUG
      - RELOAD=true
    command: >
      sh -c "cd /app/backend && 
             uvicorn main:app --host 0.0.0.0 --port 8000 --reload"

  frontend:
    build:
      target: development
    volumes:
      - ./frontend:/app/frontend:cached
      - /app/frontend/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
    command: >
      sh -c "cd /app/frontend && npm run dev"

# Production override  
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up
---
# docker-compose.prod.yml
version: '3.8'

services:
  backend:
    build:
      target: production
    environment:
      - DEBUG=false
      - LOG_LEVEL=WARNING
      - WORKERS=4
    command: >
      sh -c "cd /app/backend && 
             gunicorn main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  frontend:
    build:
      target: production
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://api.energy-optimizer.com
    command: >
      sh -c "cd /app/frontend && npm start"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  nginx:
    profiles:
      - ""  # Enable by default in production
